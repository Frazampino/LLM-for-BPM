def analyze_bpmn_with_mbert(tasks_bpmn1, tasks_bpmn2, lanes_bpmn1, lanes_bpmn2, gateways_bpmn1, gateways_bpmn2):
    task_similarities = []
    for task1 in tasks_bpmn1:
        for task2 in tasks_bpmn2:
            similarity = calculate_similarity(task1['name'], task2['name'])
            if similarity > 0.7:  
                task_similarities.append({
                    "task1_id": task1['id'],
                    "task1_name": task1['name'],
                    "task2_id": task2['id'],
                    "task2_name": task2['name'],
                    "similarity": similarity
                })
    
    lane_similarities = []
    for lane1 in lanes_bpmn1:
        for lane2 in lanes_bpmn2:
            similarity = calculate_similarity(lane1['name'], lane2['name'])
            if similarity > 0.7:  
                lane_similarities.append({
                    "lane1_id": lane1['id'],
                    "lane1_name": lane1['name'],
                    "lane2_id": lane2['id'],
                    "lane2_name": lane2['name'],
                    "similarity": similarity
                })

    gateway_similarities = []
    for gateway1 in gateways_bpmn1:
        for gateway2 in gateways_bpmn2:
            name1 = gateway1['name'] if gateway1['name'] else gateway1['id']
            name2 = gateway2['name'] if gateway2['name'] else gateway2['id']
        
            similarity = calculate_similarity(name1, name2)
            if similarity > 0.7:  
                gateway_similarities.append({
                    "gateway1_id": gateway1['id'],
                    "gateway1_name": gateway1['name'],
                    "gateway2_id": gateway2['id'],
                    "gateway2_name": gateway2['name'],
                    "similarity": similarity
                })

    global_similarity = calculate_similarity(
        ' '.join([task['name'] for task in tasks_bpmn1]), 
        ' '.join([task['name'] for task in tasks_bpmn2])
    )

    return {
        "global_similarity": global_similarity,
        "task_similarities": task_similarities,
        "lane_similarities": lane_similarities,
        "gateway_similarities": gateway_similarities
    }

# Funzione per creare il gold standard
def create_gold_standard(tasks_bpmn1, tasks_bpmn2, lanes_bpmn1, lanes_bpmn2, gateways_bpmn1, gateways_bpmn2):
    gold_standard_matches = []

    # Confronto tra i task
    for task1 in tasks_bpmn1:
        for task2 in tasks_bpmn2:
            if task1['name'] == task2['name']:  
                match = {
                    "task1_name": task1['name'],
                    "task2_name": task2['name']
                }
                gold_standard_matches.append(match)

    # Confronto tra le lane
    for lane1 in lanes_bpmn1:
        for lane2 in lanes_bpmn2:
            if lane1['name'] == lane2['name']:
                match = {
                    "lane1_name": lane1['name'],
                    "lane2_name": lane2['name']
                }
                gold_standard_matches.append(match)

    # Confronto tra i gateway
    for gateway1 in gateways_bpmn1:
        for gateway2 in gateways_bpmn2:
            gateway1_name = gateway1.get('name', '')
            gateway2_name = gateway2.get('name', '')
            if gateway1_name == gateway2_name and gateway1_name:  
                match = {
                    "gateway1_name": gateway1_name,
                    "gateway2_name": gateway2_name
                }
                gold_standard_matches.append(match)

    return gold_standard_matches

# Funzione per calcolare precisione e richiamo
def calculate_precision_recall(gold_standard, similarities):
    true_positives = 0
    false_positives = 0
    false_negatives = 0

    for match in similarities:
        task1_name = match.get('task1_name')
        task2_name = match.get('task2_name')
        similarity = match.get('similarity', 0)
        
        if task1_name and task2_name:
            if any(gold_match['task1_name'] == task1_name and gold_match['task2_name'] == task2_name for gold_match in gold_standard):
                if similarity > 0.90:  # Definito un threshold per la similarità
                    true_positives += 1
            else:
                if similarity > 0.90:  # Se non è nel gold standard, è un falso positivo
                    false_positives += 1

    # Calcolo i falsi negativi (corrispondenze corrette che non sono state trovate)
    for gold_match in gold_standard:
        task1_name = gold_match['task1_name']
        task2_name = gold_match['task2_name']
        if not any(sim['task1_name'] == task1_name and sim['task2_name'] == task2_name for sim in similarities):
            false_negatives += 1

    # Calcola precisione e recall
    precision = true_positives / (true_positives + false_positives) if true_positives + false_positives > 0 else 0
    recall = true_positives / (true_positives + false_negatives) if true_positives + false_negatives > 0 else 0
    
    return precision, recall

# Funzione per confrontare file BPMN
def compare_bpmn_files(bpmn_file_1, bpmn_file_2):
    print("Converting files to XML...")
    process_1_xml = bpmn_to_xml(bpmn_file_1)
    process_2_xml = bpmn_to_xml(bpmn_file_2)

    print("Parsing BPMN files...")
    tasks_bpmn1, lanes_bpmn1, gateways_bpmn1 = parse_bpmn(bpmn_file_1)
    tasks_bpmn2, lanes_bpmn2, gateways_bpmn2 = parse_bpmn(bpmn_file_2)

    print("Analyzing semantic similarity...")
    result = analyze_bpmn_with_mbert(tasks_bpmn1, tasks_bpmn2, lanes_bpmn1, lanes_bpmn2, gateways_bpmn1, gateways_bpmn2)

    print(f"Global Similarity: {result['global_similarity']:.4f}")
    
    print("\nTask Similarities:")
    for similarity in result["task_similarities"]:
        print(f"{similarity['task1_name']} <=> {similarity['task2_name']}: Similarity = {similarity['similarity']:.4f}")

    print("\nLane Similarities:")
    for similarity in result["lane_similarities"]:
        print(f"{similarity['lane1_name']} <=> {similarity['lane2_name']}: Similarity = {similarity['similarity']:.4f}")

    print("\nGateway Similarities:")
    for similarity in result["gateway_similarities"]:
        print(f"{similarity['gateway1_name'] or similarity['gateway1_id']} <=> {similarity['gateway2_name'] or similarity['gateway2_id']}: Similarity = {similarity['similarity']:.4f}")

    # Creazione del gold standard
    gold_standard_matches = create_gold_standard(tasks_bpmn1, tasks_bpmn2, lanes_bpmn1, lanes_bpmn2, gateways_bpmn1, gateways_bpmn2)

    # Calcolo precisione e richiamo
    precision, recall = calculate_precision_recall(gold_standard_matches, result["task_similarities"])

    # Calcolo F1-Score
    f1_score = 2 * (precision * recall) / (precision + recall) if precision + recall > 0 else 0

    print(f"\nPrecision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")
    print(f"F1-Score: {f1_score:.4f}")

# Esempio di utilizzo
bpmn_file_1 = "Cologne.bpmn"  
bpmn_file_2 = "Frankfurt.bpmn"  

# Confronta i file BPMN
compare_bpmn_files(bpmn_file_1, bpmn_file_2)
